{"version":3,"sources":["Header.js","firebase.js","TinderCards.js","SwipeButtons.js","Chat.js","Chats.js","ChatScreen.js","App.js","serviceWorker.js","index.js"],"names":["Header","backButton","history","useHistory","className","IconButton","onClick","replace","fontSize","to","src","alt","database","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","TinderCards","useState","people","setPeople","useEffect","unsubscribe","collection","onSnapshot","snapshot","docs","map","doc","data","person","key","name","preventSwipe","style","backgroundImage","url","SwipeButtons","Chat","message","profilePic","timestamp","Avatar","Chats","ChatScreen","input","setInput","image","messages","setMessages","value","onChange","e","target","placeholder","type","preventDefault","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.0fb91b42.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Header.css';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport ForumIcon from '@material-ui/icons/Forum';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport {Link, useHistory} from 'react-router-dom';\r\n\r\nfunction Header({backButton}) {\r\n    const history = useHistory();\r\n    return (\r\n        <div className=\"header\">\r\n            {backButton ? (\r\n                <IconButton onClick={() => history.replace(backButton)}>\r\n                    <ArrowBackIosIcon className=\"header__icon\" fontSize=\"large\"/>\r\n                </IconButton>\r\n            ): (\r\n                <IconButton>\r\n                    <PersonIcon className=\"header__icon\" fontSize=\"large\"/>\r\n                </IconButton>\r\n            )}\r\n\r\n            <Link to=\"/\">\r\n            <img\r\n             className=\"header__logo\"\r\n             src=\"https://1000logos.net/wp-content/uploads/2018/07/tinder-logo.png\" \r\n             alt=\"tinder logo\"/>\r\n            </Link>\r\n            \r\n\r\n            <Link to=\"/chats\">\r\n            <IconButton>\r\n                <ForumIcon className=\"header__icon\" fontSize=\"large\" />\r\n            </IconButton>\r\n            </Link>\r\n            \r\n            \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Header","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBX4fOnaZ69MtYG7-ilas11SxIaFlJRa_o\",\r\n    authDomain: \"tinder-clone-32e65.firebaseapp.com\",\r\n    databaseURL: \"https://tinder-clone-32e65.firebaseio.com\",\r\n    projectId: \"tinder-clone-32e65\",\r\n    storageBucket: \"tinder-clone-32e65.appspot.com\",\r\n    messagingSenderId: \"903438891159\",\r\n    appId: \"1:903438891159:web:e808b4cef711715dbb91d2\",\r\n    measurementId: \"G-NK9WY80NG8\"\r\n  };\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst database = firebaseApp.firestore();\r\n\r\nexport default database;","import React, { useState, useEffect } from \"react\";\r\nimport TinderCard from \"react-tinder-card\";\r\nimport \"./TinderCards.css\"\r\nimport database from './firebase'\r\n\r\nfunction TinderCards(){\r\n    const [people, setPeople] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        const unsubscribe = database\r\n        .collection('people')\r\n        .onSnapshot(snapshot =>(\r\n            setPeople(snapshot.docs.map(doc => doc.data()))\r\n        ))\r\n\r\n        return() => {\r\n            unsubscribe();\r\n        }\r\n    }, []);\r\n\r\n    // setPeople9([...people, '', ''])\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"tinderCards__cardContainer\">\r\n            {people.map(person => (\r\n                <TinderCard \r\n                    className=\"swipe\"\r\n                    key={person.name}\r\n                    preventSwipe={['up', 'down']}\r\n                >\r\n                    <div\r\n                        style={{ backgroundImage: `url(${person.url})` }}\r\n                        className=\"card\"\r\n                    >\r\n                        <h3>{person.name}</h3>\r\n                    </div>\r\n                    <div>\r\n\r\n                    </div>\r\n                </TinderCard>\r\n            ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TinderCards","import React from 'react';\r\n\r\nimport ReplayIcon from \"@material-ui/icons/Replay\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport StatRateIcon from \"@material-ui/icons/StarRate\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport FlashOnIcon from \"@material-ui/icons/FlashOn\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nimport \"./SwipeButtons.css\";\r\n\r\nfunction SwipeButtons(){\r\n    return(\r\n        <div className=\"swipeButtons\">\r\n            <IconButton className=\"swipeButtons__repeat\">\r\n                <ReplayIcon fontSize=\"large\"/>\r\n            </IconButton>\r\n            <IconButton className=\"swipeButtons__left\">\r\n                <CloseIcon fontSize=\"large\"/>\r\n            </IconButton>\r\n            <IconButton className=\"swipeButtons__star\">\r\n                <StatRateIcon fontSize=\"large\"/>\r\n            </IconButton>\r\n            <IconButton className=\"swipeButtons__right\">\r\n                <FavoriteIcon fontSize=\"large\"/>\r\n            </IconButton>\r\n            <IconButton className=\"swipeButtons__lightning\">\r\n                <FlashOnIcon fontSize=\"large\"/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SwipeButtons","import React from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\"\r\nimport \"./Chat.css\"\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Chat({name, message, profilePic, timestamp}){\r\n    return(\r\n        <Link to={`/chats/${name}`}>\r\n        \r\n       <div className=\"chat\">\r\n           <Avatar className=\"chat__image\" alt={name} src={profilePic}/>\r\n           <div className=\"chat__details\">\r\n                <h2>{name}</h2>\r\n                <p>{message}</p>\r\n           </div>\r\n            <p className=\"chat_timestamp\">{timestamp}</p>\r\n       </div> \r\n       </Link>\r\n    )\r\n}\r\n\r\nexport default Chat;","import React from 'react';\r\nimport Chat from './Chat';\r\nimport \"./Chats.css\";\r\n\r\nfunction Chats(){\r\n    return (\r\n    <div className=\"chats\">\r\n        <Chat\r\n            name=\"N Lidiawaty\"\r\n            message=\"Baik Banget Hehe\"\r\n            timestamp=\"40 seconds ago\"\r\n            profilePic=\"https://p16.tiktokcdn.com/aweme/720x720/tiktok-obj/d08c7b2c732f8eea8ca833184a890242.jpeg\"\r\n        />\r\n        <Chat\r\n            name=\"Ghea Indrawari\"\r\n            message=\"Hallo Farhan\"\r\n            timestamp=\"40 seconds ago\"\r\n            profilePic=\"https://static.republika.co.id/uploads/images/inpicture_slide/096808500-1587935205-5ea51252cfa24-ghea-indrawarij.jpg\"\r\n        />\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Chats;","import React, { useState } from 'react';\r\nimport \"./ChatScreen.css\";\r\nimport { Avatar } from '@material-ui/core';\r\n\r\nfunction ChatScreen(){\r\n    const [input, setInput] = useState('');\r\n    const [messages, setMessages] = useState([\r\n        {\r\n            name: 'N Lidiawaty',\r\n            image: 'https://p16.tiktokcdn.com/aweme/720x720/tiktok-obj/d08c7b2c732f8eea8ca833184a890242.jpeg',\r\n            message: 'Hallo Farhan?'\r\n        }, \r\n        {\r\n            name: 'N Lidiawaty',\r\n            image: 'https://p16.tiktokcdn.com/aweme/720x720/tiktok-obj/d08c7b2c732f8eea8ca833184a890242.jpeg',\r\n            message: 'Apa Kabar'\r\n        },\r\n        {\r\n            message: 'Baik Banget Hehe'\r\n        }\r\n    ])\r\n\r\n    const handleSend = e => {\r\n        e.preventDefault();\r\n        setMessages([...messages, {message: input}]);\r\n        setInput(\"\");\r\n    }\r\n\r\n    return(\r\n        <div className=\"chatScreen\">\r\n            <p className=\"chatScreen__timestamp\"> YOU MATCHED WITH N LIDIAWATY ON 10/08/20</p>\r\n            {messages.map((message) => (\r\n                message.name ? (\r\n                    <div className=\"chatScreen__message\">\r\n                    <Avatar\r\n                        className=\"chatScreen_image\"\r\n                        alt={message.name}\r\n                        src={message.image}\r\n                    />\r\n                    <p className=\"chatScreen__text\">{message.message}</p>\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"chatScreen__message\">\r\n                    <p className=\"chatScreen__textUser\">{message.message}</p>\r\n                    </div>\r\n                )\r\n            ))}\r\n\r\n            \r\n                <form className=\"chatScreen_input\">\r\n                    <input \r\n                        value={input}\r\n                        onChange={e => setInput(e.target.value)}\r\n                        className=\"chatScreen_inputField\"\r\n                        placeholder=\"Type a message..\" \r\n                        type=\"text\"\r\n                    />\r\n                    <button onClick={handleSend} type=\"submit\" className=\"chatScreen_inputButton\">SEND</button>\r\n                </form>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatScreen;","import React from 'react';\nimport Header from './Header';\nimport './App.css';\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport TinderCards from './TinderCards';\nimport SwipeButtons from './SwipeButtons';\nimport Chats from './Chats';\nimport ChatScreen from './ChatScreen';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* Header */}\n      <Router>\n        \n        <Switch>\n          <Route path=\"/chats/:person\">\n            <Header backButton=\"/chats\"/>\n            <ChatScreen/>\n          </Route>\n          <Route path=\"/chats\">\n            <Header backButton=\"/\"/>\n            <Chats/>\n          </Route>\n          <Route path=\"/\">\n            <Header/>\n            <TinderCards/>\n            <SwipeButtons/>\n          </Route>\n        </Switch>\n      </Router>\n      {/* Tinder Cards */}\n      {/* Buttons below tinder cards */}\n      {/* Chat screen */}\n\n      {/* Individual chat screen */}\n      \n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}